version: "3.8"

services:
  consul:
    image: consul:1.15.2
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0 -ui
    networks:
      - web

  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.consulcatalog=true"
      - "--providers.consulcatalog.prefix=traefik"
      - "--providers.consulcatalog.endpoint.address=consul:8500"
      - "--providers.consulcatalog.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - consul
    networks:
      - web

  registrator:
    image: gliderlabs/registrator:latest
    command: -internal -cleanup consul://consul:8500
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    depends_on:
      - consul
    networks:
      - web

  casdoor:
    image: casbin/casdoor
    container_name: casdoor
    environment:
      driverName: postgres
      dataSourceName: ${DB_DSN}
    ports:
      - "8000:8000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.casdoor.rule=Host(`auth.fyndr.local`)"
      - "traefik.http.services.casdoor.loadbalancer.server.port=8000"
    networks:
      - web
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile-dev
    container_name: api
    environment:
      - DEBUG=${DEBUG:-false}
    networks:
      - web
    ports:
      - "${API_HTTP_PORT}:8081"
      - "2345:2345"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.api.rule=Host(`api.fyndr.local`)"
      - "traefik.http.services.api.loadbalancer.server.port=${API_HTTP_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_HTTP_PORT}/health"]
      interval: 30s
      retries: 3

networks:
  web:
    driver: bridge